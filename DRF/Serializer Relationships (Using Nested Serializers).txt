ესეიგი პირველი არის HyperlinkRelatedField

და როდესაც გავაგზავნით მოთხოვნას პოსტზე ინფორმაცია მოვა ლინკის სახით
ანუ მაგალითად
http://127.0.0.1:8000/posts/5 ასეთი რამე მოვა რა

სერიალაიზერში ვწერთ ამას
posts = serializers.HyperlinkedRelatedField(
        many=True, view_name="pagePosts_details", queryset=User.objects.all()
    )

ესეიგი view სახელში იმ viewს სახელს ვწერთ რომელიც არუნებს ცალკეულ პოსტებს მაგალითად ასე
path("posts/<int:pk>", views.PostCrudView.as_view(), name="pagePosts_details")

და ეს უკვე view ფუნქცია 
@api_view(http_method_names=["GET"])
@permission_classes([])
def posts_for_user(request: Request):
    user = request.user

    serializer = UserPostsSerializer(instance=user, context={"request": request})
    return Response(data=serializer.data, status=status.HTTP_200_OK)


და რათქმაუნდა როდესაც პოსტს შევქმნით არუნდა დაგვავიწყდეს რომ შევუქმნათ იუზერიც
def perform_create(self, serializer):
        # ვიღებთ იუზერს რომელმაც შექმნა პოსტი
        user = self.request.user
        serializer.save(author=user)
        return super().perform_create(serializer)






ამით მოკლედ დავაკავშირე სამი რამე

from rest_framework import serializers
from inventory.models import *

class ProductSerializer(serializers.ModelSerializer):
    class Meta:
        model = Product
        fields = ["name", "description"]

class mediaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Media
        fields = ["image"]
 
        ამით ფოტოს ლინკს ჰოსტის სახელი წავაშალე
    def to_representation(self, instance):
        representation = super().to_representation(instance)
        image_url = representation['image']

        # Split the image URL by '/' and keep only the path after 'images/'
        path_parts = image_url.split('/images/')
        if len(path_parts) > 1:
            representation['image'] = path_parts[1]

        return representation

class ProductInventorySerializer(serializers.ModelSerializer):
    product = ProductSerializer(many=False)  # Including the ProductSerializer as a nested serializer
        და ამით მივიღე ფოტოები ისე რო მოკლედ პროდუქტ ინვენტორში არიყო ეს ფიელდი
    media_product_inventory = mediaSerializer(many=True, read_only=True)
    # brand = BrandSerializer()
    # product_type = ProductTypeSerializer()
    # #SerializerMethodField ეს გვჭირდება რათა განვსაზღვროთ მეთოდები ამისთვის
    # #როდესაც მეთოდს ვწერთ და გვინდა რომ კონკრეტულად ამისთვის იყოს მაშ სახელეს წინ get უნდა დავუწეროთ
    # attribute_values = serializers.SerializerMethodField()


    class Meta:
        model = ProductInventory
        fields = ["id", "retail_price", "product", "media_product_inventory"]