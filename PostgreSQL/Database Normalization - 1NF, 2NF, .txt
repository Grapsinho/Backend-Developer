Database Normalization:
ეს ნიშნავს  გაუკეთოს შენს დატაბეისს ისეთი დიზაინი რომ მონაცემები შეინახო ორგანიზებულად და თანმიმდევრულად

ის გეხმარება აირიდო ზედმეტი ან მონაცემების ჭარბი რაოდენობა

Database Normalization - 1NF:
1) პირველ ფორმაში არშეიძლება ერთ ქოლუმნზე იყოს რამოდენიმე მნიშვნელობა

2) უნდა იყოს ფრაიმარი ქი

3) არ უნდა იყოს დუბლირებული ქოლუმნი ან როუ

4) ყველა ქოლუმნს უნდა ქონდეს ერთი მნიშვნელობა თითოეული როუსთვის


Database Normalization - 2NF:
პირველი ფორმა მხოლოდ გამეორებულ გრუპებს აშორებს და არა სიჭარბეს

1) უნდა იყოს პირველ ფორმაში

2) ყველა რომელიც არარი ფრაიმარი ქი უნდა იყოს დამოკიდებული ფრაიმარი ქიზე

მაგალითად:


| EMPLOYEE_ID | NAME  | JOB_CODE | JOB       | STATE_CODE | HOME_STATE |
|-------------|-------|----------|-----------|------------|------------|
| E001        | Alice | J01      | Chef      | 26         | Michigan   |
| E001        | Alice | J02      | Waiter    | 26         | Michigan   |
| E002        | Bob   | J02      | Waiter    | 56         | Wyoming    |
| E002        | Bob   | J03      | Bartender | 56         | Wyoming    |
| E003        | Alice | J01      | Chef      | 56         | Wyoming    |


ესეიგი რახდება ამ ცხრილში აქ არის პრიველი ფორმა შესრულებული მაგრამ
როდესაც იცი ემფლოი აიდი შეგიძლია გაიგო სახლი, შტატი და სახელი ეს ნიშნავს რომ ეს ქოლუმნები არიან დამოკიდებული ემფლოი აიდზე ხოლო სამუშაო არის დამოკიდებული სამუშაო კოდზე ეს უნდა იყოს ცალკე ცხრილი

EMPLOYEE_ID	JOB_CODE
E001	                   J01
E001	                   J02
E002	                   J02
E002	                   J03
E003	                   J01


ეს არის ფორეინ ქით დაკავშირებული ცხრილი რომელსაც შეგვიძ₾ია დავარქვათ employee_roles 

ემფლოი ცხრილიდან ამოვიღებთ ჯობ კოდს და ჯობს და გადავიტანთ სხვა ცხრილში

JOB_CODE      JOB
J01	     Chef
J02	     Waiter
J03	     Bartender

ასე მაგალითად და ეხლა უკვე ჩვეულებრივად დავაკავშირებთ ამ ცხრილებს ერთმანეთთან ეს არის მეორე ფორმა
