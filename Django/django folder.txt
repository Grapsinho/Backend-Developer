მოკლედ როდესაც ვქმნით პითონის პროექტს ფოლდერს მაშინ იმ ფოლდერში იქნება რამოდენიმე პითონის ფაილი

__init__.py: ანუ ეს ეუბნება პითონს რომ ეს დირექტორია უნდა ჩაითვალოს პითონის პაკეტად(package)

settings.py: ეს ფაილი შეიცავს ჩვენი ჯანგოს ინსტალაციის ყველა კონფიგურაციის პარამეტრებს როგორიცაა: database connection, installed applications, middleware(შუალედური პროგრამა), static and media files directories, email settings, time zone,

DEBUG: ეს არის boolean რომელიც გვიჩვენებს დებაგინგი ჩართულია თუ არა, როდესაც True ჯანგო გმაოიტანს ყველა ერორს თავისი დებაგინგის ინფორმაციით მგონი ესეა.

ALLOWED_HOSTS: ეს არის ჯანგოს უსაფრთხოების ფუნქცია.თქვენ ეუბნებით Django-ს, მიიღოს მხოლოდ მოთხოვნები, რომლებიც განკუთვნილია თქვენი აპლიკაციის დომენის სახელისთვის და უარყოს მოთხოვნები, რომლებიც განკუთვნილია სხვა დომენებისთვის. ეს ხელს უწყობს თქვენი აპლიკაციის დაცვას თავდასხმებისგან და დაიცავს თქვენი მომხმარებლების მონაცემებს.

INSTALLED_APPS: ყველა აპლიკაციის სია, რომლებიც   დაინსტალირებული და აქტიურია პროექტისთვის.

DATABASES: ლექსიკონი, რომელიც განსაზღვრავს პროექტის მიერ გამოყენებული მონაცემთა ბაზის კავშირ(ებ)ს. ეს მოიცავს მონაცემთა ბაზის ძრავას, ჰოსტს, პორტს, მონაცემთა ბაზის სახელს, მომხმარებლის სახელს და პაროლს.

MIDDLEWARE: საშუალო პროგრამის კლასების სია, რომლებიც გამოიყენება შემომავალი მოთხოვნებისა და გამავალი პასუხების დასამუშავებლად. ეს შეიძლება შეიცავდეს ისეთ რამეებს, როგორიცაა ავტორიზაცია, ქეშირება, შეკუმშვა და სხვა.

asgi.py & wsgi.py: ორივე განკუთვნილია ვებ სერვერებისთვის პითონ ვებ აპლიკაციასთან კომუნიკაციისთვის. ისინი განსაზღვრავენ სტანდარტულ ინტერფეისს რომელიც ვებსერვერებსა და პითონის ფრეიმვორკებმა შეუძლიათ გამოიყენონ HTTP მოთხოვნებისა და პასუხების გასაცვლელად

WSGI(Web Server Gateway Interface): ეს უფრო ძველი სფეციპიკაციაა რომელიც არის სინქრონული რაც ნიშანვს რომ ის ამუშავებს ერთ მოთხოვნას ერთდროულად ერთ თემაში. ამან შეიძლება გამოიწვიოს მასშტაბურობის პრობლემები დიდირაოდენობის თანმხლები მოთხოვნების განხილვისას, რადგან თითოეული მოთხოვნა თავის მხრივ უნდა დამუშავდეს.

ASGI(Asynchronous Server Gateway Interface): ეს არის ახალი სფეციპიკაცია რომელიც დაინერგა WSGI შეზღუდვების მოსაგვარებლად. ის შექმნილია ასინქრონული პროგრამირების დასამუშავებლად და შეუძლია მრავალი მოთხოვნის დამუშავება ერთდროულად არადაბლოკვის I/O ოპერაციების გამოყენებით. ეს საშუალებას აძლევს ASGI აპლიკაციებს გაუმკლავდეს თანმხლები მოთხოვნების ბევრად უფრო დიდ რაოდენობას WSGI აპლიკაციებთან შედარებით, რაც უკეთესად მოერგება რეალურ დროში აპლიკაციებს, როგორიცაა ჩატის სისტემები ან ცოცხალი მონაცემთა არხები

WebSocket: ეს არის კომპიუტერული საკომუნიკაციო პროტოკოლი რომელიც უზრუნველყოფს სრულ დუპლექს საკომუნიკაციო არხებს ერთი TCP კავშირის საშუალებით. შექმნილია იმისთვის, რომ ვებ სერვერებსა და კლიენტებს შეეძლოთ რეალურ დროში
კომუნიკაცია, დაბალი შეყოვნებით და მინიმალური ზედნადებით.

ტრადიციული HTTP კავშირები ეფუძნება მოთხოვნა-პასუხს, რაც იმას ნიშნავს, რომ კლიენტი აგზავნის მოთხოვნას სერვერზე და სერვერი პასუხობს ერთი შეტყობინებით.

WebSocket წყვეტს ამ პრობლემას სერვერსა და კლიენტს შორის მუდმივი, ორმხრივი საკომუნიკაციო არხის დამყარებით. ეს საშუალებას აძლევს სერვერს გაუგზავნოს შეტყობინებები კლიენტს ნებისმიერ დროს, კლიენტის მოთხოვნის მოლოდინის გარეშე. ანალოგიურად, კლიენტს შეუძლია გაგზავნოს შეტყობინებები სერვერზე ნებისმიერ დროს, სერვერის მიერ კომუნიკაციის დაწყების მოლოდინის გარეშე.

ეს გამოგვადგება მაგალითად ჩატის სისტემების ასაწყობად და ონლაინ თამაშებისთვის

ასევე ASGI ამას უჭერს მხარს



