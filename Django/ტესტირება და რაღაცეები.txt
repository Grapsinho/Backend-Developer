Test-Driven Development (TDD):
ეს არის მეთოდოლოგია რომლის დროსაც სანამ დაიწყებ კოდის დაწერას მანამდე წერ ტესტებს ეს მიყვება რამდენიმე ნაბიჯებს

1) write a test: პირველ რიგში დაიწყებ დაწერას რაღაცა ტესტებს რომელიც განსაზღვრავს თუ რა გინდა რომ შენმა კოდმა გააკეთოს

2) Run the test: ეს ტესტი იქნება შეცდომა რადგან ჯერ არაფერი დაგვიწერია ეს მიუთითებს იმაზე რომ ჩვენი კოდი ჯერ არ აკეთებს იმას რასაც უნდა აკეთებდეს

3) write code: ახლა კი დაწერ კოდს რომელიც ავსებს ჩვენი ტესტის მოთხოვნებს მიზანი იქნება ტესტის ჩაბარება

4) Refactor (if necessary): როდესაც შენი კოდი ჩააბარებს ტესტს შეგიძლია შეცვალო ის უფრო კარგი გახადი გააუმჯობესო რათქმაუნდა უნდა უზრუნველყო ის რომ ტესტი ჩააბაროს შენმა კოდმა

5) Repeat: ყველა ახალ კოდის დამატებაზე შენ გააკეთებ ამყველაფერს


როდესაც ტესტ ფაილს ვაკეთებთ ეს ფაილი test ით უნდა იწყებოდეს


conftest.py:
ანუ აქ შეგვიძლია დავამატოთ დამატებითი რაღაც კონფიგურაციები
მოკლედ ადგილი სადაც ვინახავთ რაღაც გამოსადეგ ხელსაწყოებს
ასევე თუ გაქ რამდენიმე ტესტი ყველაში ერთი და იგივე რამე რო არ წერო შეგიძლია ეს ყველაფერი ჩაწერო აქ და ის გაანაწილებს ყველა ტესტში მსგავსი რაღაც მგონი რა

ასევე შეგვიძლია აქედან დავამატოთ ტესტ მონაცემები რათა შემდეგ ეს გამოვიყენოთ ტესტებში


pytest_plugins = [
    "ecommerce.tests.fixtures",
    "ecommerce.tests.selenium",
    "ecommerce.tests.factories",
]

ანუ როდესაც რაიმე ტესტი გაეშვება ესენიც ავტომატურად გაეშვებიან

pytest_plugins არის სპეციალური კონფიგურაციის ვარიანტი pytest-ში, რომელიც საშუალებას გაძლევთ მიუთითოთ დამატებითი დანამატები ან მოდულები, რომლებიც ავტომატურად უნდა იტვირთებოდეს ტესტის აღმოჩენისა და შესრულების დროს.


@pytest.mark.dbfixture:

მოკლედ ეს გვჭირდება იმისთვის რომ გავარკიოთ ამის ქვეშ დაწერილი ფუნქცია რაიმე მონაცემებზეა დაყრდნობილი თუ არა მაგალითად რაღაც fixture ებს რო ვიყენებთ წინასწარ გაწერილ ინფორმაციას ეს ინფორმაცია შეგვიძლია გამოვიყნეოთ როგორც მარტო დასატესტად ან შეგვიძლია ეს იყოს ნამდვილი მონაცემები რომლებიც უნდა აიტვირთოს დატაბეისში და შემდეგ გავტესტოთ უკვე ნამდვილი მონაცემები

თუ არ იქნება ეს რაღაც მაშ შეგვიძლია გამოვიყენოთ ფაქტორი ბოი რათა შევქმნათ  ტყუილი მონაცემები და იმათზე დაყრდნობით გავტესტოთ ჩვენი მონაცემები ასერომვთქვათ


ხოლო ამას ვიყენებთ მაშინ როდესაც გვინდა რამოდენიმე შემთხვევისთვის გავტესტოთ ჩვენი მონაცემები
@pytest.mark.parametrize(
    "id, name, slug, is_active",
    [
        (1, "fashion", "fashion", 1),
        (18, "trainers", "trainers", 1),
        (35, "baseball", "baseball", 1),
    ],
)
