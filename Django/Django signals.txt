ესეიგი ჯანგო სიგნალები არის მექანიზმი რომელიც საშუალებას აძლევს თქვენი აპლიკაციის სხვადასხვა ნაწილს იკომუნიკაციონ და რეაგირება მოახდინონ იმ რაღაც მოვლენაზე რომელიც აპლიკაციაში წარმოიშვა 

from django.dispatch import receiver
from django.db.models.signals import post_save

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    age = models.IntegerField(null=True, blank=True)
    nickname = models.CharField(max_length=100, null=True, blank=True)

    def __str__(self):
        return self.user.username

@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.create(user=instance)

ეს არის დეკორატორი რომელიც აკავშირებს create_user_profile ფუნქციას post_save სიგნალთან რომელიც წარმოიშვა User მოდელის მიერ ანუ ეს იმას ნიშნავს რომ სიგნალი მაშინ მოვა როცა იუზერი დასეივდება 
@receiver(post_save, sender=User)


ეს არის სიგნალის დამმუშავებელი ფუნქცია 
sender ანუ გამომმგზავნელი
instance ეს არის ის ობიექტი რომელიც დასეივდა ანუ User
created ეს არის boolean ველიუ გვატყობინებს ასეთი მოვლენა მოხდა თუ არა ანუ მოდელი დასეივდა თუ არა
def create_user_profile(sender, instance, created, **kwargs)


ესეიგი ამ კოდს ვწერთ ადმინ ფაილში 

რას ვშვებით ეხლა ამ კოდით ძირითადად რაც გამოდის ამ კოდით ის არის რომ UserProfile მოდელის fieldები როდესაც გვინდა რომ დავააბდეითოთ იუზერი ადმინ ფეიჯზე იქ გამოჩნდება ხოლო როცა გვინდა რომ იუზერი დავამატოთ იქ არა ძირითადად ეს კოდი აკეთებს მაგას

from user.models import UserProfile
from django.contrib.auth.models import User
from django.contrib.auth.admin import UserAdmin as AuthUserAdmin

class UserProfileInline(admin.StackedInline):
    model = UserProfile
        წაშლა არ შეგვიძლია
    can_delete = False

class AccountsUserAdmin(AuthUserAdmin):
    def add_view(self, *args, **kwargs):
        self.inlines =[]
        return super(AccountsUserAdmin, self).add_view(*args, **kwargs)

    def change_view(self, *args, **kwargs):
        self.inlines =[UserProfileInline]
        return super(AccountsUserAdmin, self).change_view(*args, **kwargs)


admin.site.unregister(User)
admin.site.register(User, AccountsUserAdmin)


ესეიგი ამ კოდში ჩვენ ჩვენი იუზერი დავააბდეითეთ

როდესაც იუზერი უკვე დალოგინებულია ჩვენ უბრალოდ ეს ინფორმაცია წამოვიღეთ იუზერისგან შევავსეთ ინფუთები შემდეგ მივეცით საშუალება იუზერს რომ ჩაეწერა სხვა რამ რაც უნდოდა და ბათონზე დაწოლით დავააბდეითეთ მისი პროფაილი

@transaction.atomic ეს ნიშნავს რომ თუ ერთი ფორმის შევსებისას მაინც თუ იქნებოდა ერორი მაშინ არც ერთი შესრულდება

ანუ ელსში წერია GET მეთოდის დროს რა მოხდება ხოლო მეორეში კი POST

from django.shortcuts import render, redirect
from django import forms
from .models import UserProfile
from django.contrib.auth.models import User
from django.db import transaction
from django.contrib.auth.decorators import login_required

class UserForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ("first_name", "last_name")

class UserProfileForm(forms.ModelForm):
    class Meta:
        model = UserProfile
        fields = ("age", "nickname")

@login_required
@transaction.atomic
def update_profile(request):
    if request.method == "POST":
        user_form = UserForm(request.POST, instance=request.user)
        user_profile_form = UserProfileForm(request.POST, instance=request.user.userprofile)
        if user_form.is_valid() and user_profile_form.is_valid():
            user_form.save()
            user_profile_form.save()
            return redirect("user:profile")
    else:
        user_form = UserForm(instance=request.user)
        user_profile_form = UserProfileForm(instance=request.user.userprofile)
    return render(request, "profile.html", {"u_form":user_form, "p_form": user_profile_form})
