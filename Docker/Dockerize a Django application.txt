პირველ რიგში რათქმაუნდა მზად უნდა გვქონდეს ჩვენი რექუაირემენტების ფაილი

ეხალ უკვე უნდა გადავწყვიტოთ რომელ ოპერატიულ სისტემაზე გავუშვებთ ჩვენს კონტაინერს

ეს ყველაფერი არის Dockerfileისთვის პირველი ამას ვქმნით
# operation system Windows and python version
FROM python:3.12 

# ანუ ამის გამოყენებით პითონი არ დაწერს ასეთ ფაილებს .pyc
ENV PYTHONDONTWRITEBYTECODE 1
# ყველა აუთფუთი გაიგზავნება კონტაინერის კონსოლში
ENV PYTHONUNBUFFERED 1

WORKDIR /app

COPY requirements.txt /app/
# --no-cache-dir ეს ეუბნება pipს რომ არ გამოიყენოს ქეშინგი გადმოწერის დროს 
RUN pip install --no-cache-dir -r requirements.txt

# ყველაფერს ვაკოპირებთ /app ფოლდერში
COPY . .

# ამით ვუშვებთ აპლიკაციას
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]


შემდეგ ჩავრთოთ ჩვენი დოკერი და გავუშვათ vscode ში ეს ქომანდი რათქმაუნდა უნდა ვიყოთ სამუშაო გარემოში
და იმ ფოლდერში სადაც არის აპლიკაცია, ამ ქომანდით ვქმნით კონტაინერს
docker build -tag mydjangoapp .


Part#1
docker build --tag python-django .
docker run --publish 8000:8000 python-django
Part#2
docker-compose build
docker-compose run --rm app django-admin startproject core .
docker-compose up
Part#3
docker-compose build
docker-compose run --rm app django-admin startproject core .
docker-compose up
docker exec -it django_container /bin/bash
Part#4
docker-compose run django_app sh -c "django-admin startapp newapp ."
docker exec -it django_app sh


