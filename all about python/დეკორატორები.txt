მოკლედ ანუ დეკორატორები გვეხმარებიან რომ არ გავიმეოროთ ჩვენი კოდი ანუ მაგალითად შევქმნით ფუნქციას სადაც შევასრულებთ რაღაც მოქმედებას და ეს შეგვიძლია გამოვიყენოთ სხვა ფუნქციაზეც ისე რომ ზედმეტი ლაინის კოდი არ ვწეროთ

def something(func):
    def wrapper():
        print("this is result")
        result = func()
        
        return result

    return wrapper

@something
def func1():
    print(10)

@something
def func2():
    print(20)

func2()

ანუ ამ კოდში მე ეხლა ვქმნი დეკორატორს ეს არის პირველი something ფუნქცია რომელსაც გადაეცემა პარამეტრად func არ რაც გვინდა შეგვიძლია ის დავარქვათ შემდგომ ვქმნით კიდევ ერთ ფუნქციას შიგნით და აქ უკვე ვაკეთებთ იმ დამატებით რაღაცეებს რაც გვინდა რომ დაემატოს დანარჩენ ფუქნციებს ამჯერად მე ორივე ფუნქციას დავამატე "this is result" ეს.

შემდეგომ თუ გვინდა რომ ეს დეკორატორი დეკორატორი იყოს უნდა დავაწეროთ თავზე ამის სხვა გზაც არსებობს თუმცა იყოს ჯერ ეს.

და ყველაფერი მუშაობს



x = func2

print(x.__name__)

და ასე რო გავაკეთოთ დაგვიბეჭდავს wrapper ანუ ეს x მიმართავს ვრაპერ ფუნქციას


და თუ იმ ორი ფუნქციას რომელსაც გვინდა რომ რამე დავამატოთ კიდევ ექნება სხვა პარამეტრი ამ შემთხვევაში wrapper func ამათაც უნდა მივცეთ პარამეტრები *args, **kwargs ეს ორი

